{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI and ML for Mechanical Engineering","text":""},{"location":"#course-overview","title":"Course Overview","text":""},{"location":"#i-course-title","title":"I. Course Title","text":"<p>AI and ML for Mechanical Engineering</p>"},{"location":"#ii-proposed-course-number","title":"II. Proposed Course Number","text":""},{"location":"#iii-units","title":"III. Units","text":"<p>Lecture 2 | Tutorial 0 | Lab 2 | Credit 3</p>"},{"location":"#iv-mode","title":"IV. Mode","text":"<p>Elective</p>"},{"location":"#v-evaluation-scheme","title":"V. Evaluation Scheme","text":"<ul> <li>Quiz/Assignment: 15%</li> <li>Mid-Term: 15%</li> <li>End-Term: 40%</li> <li>Lab: 15%</li> <li>Course Project: 15%</li> </ul>"},{"location":"#vi-semester","title":"VI. Semester","text":"<p>I - 2023-24</p>"},{"location":"#vii-programme","title":"VII. Programme","text":"<p>Ph.D. open for M.Tech. and Final Year B.Tech.</p>"},{"location":"#viii-learning-objective","title":"VIII. Learning Objective","text":"<ul> <li>To acquaint the students with the basic concept of AI and ML.</li> <li>To acquaint students with the application of AI and ML in the problems of Mechanical Engineering and Materials.</li> </ul>"},{"location":"#detailed-course-content","title":"Detailed Course Content","text":""},{"location":"#module-1-introduction-to-ai-and-ml","title":"Module 1: Introduction to AI and ML","text":"<ul> <li>Introduction to Artificial Intelligence (AI) and Machine Learning (ML)</li> <li>Need of AI and ML in Mechanical Engineering</li> <li>Data Understanding, Data Preprocessing, Data Engineering, Data Representation, and Visualization</li> </ul> <p>02 Hours</p>"},{"location":"#module-2-introduction-to-ai-approaches","title":"Module 2: Introduction to AI Approaches","text":"<ul> <li>Basics of AI: Search algorithms, heuristic search, and graph-based search algorithms</li> <li>Cybernetics and brain simulation, Symbolic, Sub-symbolic, Statistical</li> </ul> <p>02 Hours</p>"},{"location":"#module-3-introduction-to-approaches-to-ml","title":"Module 3: Introduction to Approaches to ML","text":"<ul> <li>Machine learning: Basic concepts</li> <li>Supervised learning, Unsupervised learning, Reinforcement learning</li> </ul> <p>02 Hours</p>"},{"location":"#module-4-feature-extraction-and-selection","title":"Module 4: Feature Extraction and Selection","text":"<ul> <li>Feature Extraction: Statistical Features, Principal Component Analysis</li> <li>Feature Selection: Ranking, Decision Tree - Entropy reduction and information gain, Exaustive, best first, Greedy forward &amp; backward, Applications of feature extraction and selection algorithmsin Mechanical Engineering.</li> </ul> <p>05 Hours</p>"},{"location":"#module-5-classification-and-regression","title":"Module 5: Classification and Regression","text":"<ul> <li>Classification: Decision tree, Random Forest, Naive Bayes, Support Vecotro Machine, Neural Networks.</li> <li>Regression: Logistic Regression, Support Vector Regression, Regression Trees: Decision tree, random forest, K-Means, K-Nearest Neighbour (KNN).</li> <li>Clustering algorithms (unsupervised learning): K Means, Agglomerative Hierarchial Clustering.</li> <li>Applications of classification, regression and clustering algorithms in Mechanical Engineering.</li> </ul>"},{"location":"#module-7-introduction-to-deep-learning","title":"Module 7: Introduction to Deep Learning","text":"<p>Deep learning - why deep learning, deep neural networks. Training a deep learning network. Standard deep learning architectures \u2013 AlexNet, VGG, Inception and ResNe models.</p> <p>02 Hours</p>"},{"location":"#module-8-application-of-ai-and-ml-for-mechancial-engineering","title":"Module 8: Application of AI and ML for Mechancial Engineering","text":"<p>Application examples for implementing AI and ML in Mechanical Engineering such as Fault Diagnosis of Rolling Element Bearing, Fault Diagnosis of Gear and Gear Box, Chatter Detection in Machine Tools, Biomedical Applications.</p> <p>03 Hours</p> <p>Module 9: Application of AI and ML for Material Science Physics informed data driven model for materials development, machine learning assisted alloy and composites development (case studies), challenges associated to the machine learning assisted alloys and composites development.</p> <p>03 Hours</p>"},{"location":"#lab-experiments","title":"Lab Experiments","text":"<ol> <li>Introduction to Python Programming</li> <li>Data Processing, Data representation and visualization</li> <li>To extract features from given data set and establish training data.</li> <li>To select relevant features using suitable technique.</li> <li>To use PCA for dimensionality reduction.</li> <li>To classify features/To develop classification model and evaluate its performance</li> <li>To develop regression model and evaluate its performance (any one algorithm).</li> <li>Markov process for modelling manufacturing processes.</li> <li>Reinforced Learning for optimizing engineering designs</li> <li>Application example 1</li> <li>Application example 2</li> </ol>"},{"location":"#text-and-reference-books","title":"Text and Reference Books","text":"<ol> <li>Steven W. Knox, \u201cMachine Learning: a Concise Introduction\u201d, Wiley, 2018</li> <li>Deisenroth, Faisal, Ong, Mathematics for Machine Learning, Cambridge University Press, 2020</li> <li>B Joshi, Machine Learning and Artificial Intelligence, Springer, 2020.</li> <li>Stuart Russell and Peter Norvig (1995), \u201cArtificial Intelligence: A Modern Approach,\u201d Third edition, Pearson, 2003.</li> <li>Artificial Intelligence by Elaine Rich, Kevin Knight and Nair, TMH</li> <li>Mohri, Rostamizdeh, Talwalkar, Foundations of Machine Learning, MIT Press, 2018.</li> <li>Kumar, Zindani, Davim, Artificial Intelligence in Mechanical and Industrial Engineering, CRC Press, 2021.</li> <li>Zsolt Nagy - Artificial Intelligence and Machine Learning Fundamentals-Apress (2018)</li> </ol> <p>This course equips students with the fundamental knowledge and skills required to understand and apply AI and ML techniques in Mechanical Engineering. With hands-on lab experiments and extensive reading material, students will delve into various approaches, algorithms, applications, and challenges in the integration of AI and ML in mechanical engineering and materials science.</p>"},{"location":"Application_example_1/","title":"Application example 1","text":""},{"location":"Application_example_1/#application-example-1","title":"Application example 1\u00b6","text":""},{"location":"Application_example_2/","title":"Application example 2","text":""},{"location":"Application_example_2/#application-example-2","title":"Application example 2\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/","title":"Data Processing Data representation and visualization","text":"In\u00a0[\u00a0]: Copied! <pre># Example: Reading a CSV file using Python\nimport pandas as pd\n\ndata = pd.read_csv('data.csv')\n</pre> # Example: Reading a CSV file using Python import pandas as pd  data = pd.read_csv('data.csv') In\u00a0[\u00a0]: Copied! <pre># Example: Summarizing data\ndata.describe()\n</pre> # Example: Summarizing data data.describe() In\u00a0[\u00a0]: Copied! <pre># Example: Implementing PCA in Python using the Iris dataset\nfrom sklearn.decomposition import PCA\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\ny = iris.target\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)\n</pre> # Example: Implementing PCA in Python using the Iris dataset from sklearn.decomposition import PCA from sklearn.datasets import load_iris  iris = load_iris() X = iris.data y = iris.target  pca = PCA(n_components=2) X_pca = pca.fit_transform(X) In\u00a0[\u00a0]: Copied! <pre># Example: Creating a scatter plot for the PCA-transformed Iris data\nimport matplotlib.pyplot as plt\n\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.show()\n</pre> # Example: Creating a scatter plot for the PCA-transformed Iris data import matplotlib.pyplot as plt  plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y) plt.xlabel('First Principal Component') plt.ylabel('Second Principal Component') plt.show()"},{"location":"Data_Processing_Data_representation_and_visualization/#data-processing-data-representation-and-visualization","title":"Data Processing Data representation and visualization\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/#table-of-contents","title":"Table of Contents\u00b6","text":"<ol> <li>Introduction</li> <li>Data Collection</li> <li>Data Preprocessing</li> <li>Data Visualization</li> <li>Conclusion</li> </ol>"},{"location":"Data_Processing_Data_representation_and_visualization/#introduction","title":"Introduction\u00b6","text":"<p>In this guide, we will explore the fascinating world of data and how we can make sense of it using machine learning techniques. Remember:</p> <p>\"Machine Learning can almost learn any information from the universe as long as it can be converted to a numerical form.\"</p>"},{"location":"Data_Processing_Data_representation_and_visualization/#data-collection","title":"Data Collection\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/#what-is-data","title":"What is Data?\u00b6","text":"<p>Data is raw information that can be collected and analyzed. It can be numerical, textual, or even visual.</p>"},{"location":"Data_Processing_Data_representation_and_visualization/#types-of-data","title":"Types of Data\u00b6","text":"<ol> <li>Numerical Data: Quantitative data like age, salary, etc.</li> <li>Categorical Data: Qualitative data like colors, gender, etc.</li> <li>Ordinal Data: Data that can be ordered but the intervals between the data points are not uniform, like movie ratings.</li> </ol>"},{"location":"Data_Processing_Data_representation_and_visualization/#data-sources-and-storage","title":"Data Sources and Storage\u00b6","text":"<ol> <li>Databases: SQL, NoSQL</li> <li>CSV files: Comma Separated Values</li> <li>TSV files: Tab Separated Values</li> <li>NPY files: NumPy array files</li> </ol>"},{"location":"Data_Processing_Data_representation_and_visualization/#data-preprocessing","title":"Data Preprocessing\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/#exploratory-data-analysis-eda","title":"Exploratory Data Analysis (EDA)\u00b6","text":"<p>EDA is the initial step in data analysis, where we summarize the main characteristics of the data.</p>"},{"location":"Data_Processing_Data_representation_and_visualization/#dimensionality-reduction-using-pca","title":"Dimensionality Reduction using PCA\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/#what-is-pca","title":"What is PCA?\u00b6","text":"<p>Principal Component Analysis (PCA) is a technique used to emphasize variation and bring out strong patterns in a dataset. It transforms the original variables into a new set of variables, the principal components, which are orthogonal (uncorrelated), and reflect the maximum variance.</p>"},{"location":"Data_Processing_Data_representation_and_visualization/#how-does-pca-work","title":"How Does PCA Work?\u00b6","text":"<ol> <li>Standardization: The features need to be standardized so that each feature contributes equally to the result.</li> <li>Covariance Matrix Computation: A covariance matrix is computed from the data set.</li> <li>Eigenvalue and Eigenvector Calculation: Eigenvalues and eigenvectors are calculated for the covariance matrix.</li> <li>Sort Eigenvalues and Select Eigenvectors: The eigenvalues are sorted, and the eigenvectors are selected that correspond to the largest eigenvalues.</li> <li>Form the New Dataset: The selected eigenvectors form the new dataset.</li> </ol>"},{"location":"Data_Processing_Data_representation_and_visualization/#data-visualization","title":"Data Visualization\u00b6","text":""},{"location":"Data_Processing_Data_representation_and_visualization/#why-visualize-data","title":"Why Visualize Data?\u00b6","text":"<p>Data visualization helps to understand the complex structure of the data.</p>"},{"location":"Data_Processing_Data_representation_and_visualization/#types-of-plots","title":"Types of Plots\u00b6","text":"<ol> <li>Bar Graphs</li> <li>Histograms</li> <li>Scatter Plots</li> </ol>"},{"location":"Data_Processing_Data_representation_and_visualization/#conclusion","title":"Conclusion\u00b6","text":"<p>Data science is a fascinating field that allows us to make sense of the complex world around us. With the power of machine learning, almost any form of information can be converted into a numerical form for analysis.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/","title":"Data Preprocessing and EDA with the Iris Dataset","text":"In\u00a0[\u00a0]: Copied! <pre># Importing libraries and loading the dataset\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\niris = load_iris()\ndf = pd.DataFrame(data=iris.data, columns=iris.feature_names)\ndf['class'] = iris.target\n</pre> # Importing libraries and loading the dataset from sklearn.datasets import load_iris import pandas as pd  iris = load_iris() df = pd.DataFrame(data=iris.data, columns=iris.feature_names) df['class'] = iris.target In\u00a0[\u00a0]: Copied! <pre># Summary statistics\ndf.describe()\n</pre> # Summary statistics df.describe() In\u00a0[\u00a0]: Copied! <pre># Importing matplotlib for data visualization\nimport matplotlib.pyplot as plt\n\n# Plotting histograms for each feature\ndf.hist()\nplt.show()\n</pre> # Importing matplotlib for data visualization import matplotlib.pyplot as plt  # Plotting histograms for each feature df.hist() plt.show() In\u00a0[\u00a0]: Copied! <pre># Scatter plot based on Sepal Length and Width\nplt.scatter(df['sepal length (cm)'], df['sepal width (cm)'], c=df['class'])\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.show()\n</pre> # Scatter plot based on Sepal Length and Width plt.scatter(df['sepal length (cm)'], df['sepal width (cm)'], c=df['class']) plt.xlabel('Sepal Length') plt.ylabel('Sepal Width') plt.show() In\u00a0[\u00a0]: Copied! <pre># Implementing PCA\nfrom sklearn.decomposition import PCA\n\n# Standardizing the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(df.iloc[:, :-1])\n\n# Applying PCA\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_scaled)\n\n# Scatter plot for the first two principal components\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=df['class'])\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.show()\n</pre> # Implementing PCA from sklearn.decomposition import PCA  # Standardizing the data from sklearn.preprocessing import StandardScaler scaler = StandardScaler() X_scaled = scaler.fit_transform(df.iloc[:, :-1])  # Applying PCA pca = PCA(n_components=2) X_pca = pca.fit_transform(X_scaled)  # Scatter plot for the first two principal components plt.scatter(X_pca[:, 0], X_pca[:, 1], c=df['class']) plt.xlabel('First Principal Component') plt.ylabel('Second Principal Component') plt.show()"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#data-preprocessing-and-eda-with-the-iris-dataset","title":"Data Preprocessing and EDA with the Iris Dataset\u00b6","text":""},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#table-of-contents","title":"Table of Contents\u00b6","text":"<ol> <li>Introduction</li> <li>Understanding the Iris Dataset</li> <li>Data Preprocessing</li> <li>Exploratory Data Analysis (EDA)</li> <li>Principal Component Analysis (PCA)</li> <li>Conclusion</li> </ol>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#introduction","title":"Introduction\u00b6","text":"<p>Welcome to this guide on Data Preprocessing and Exploratory Data Analysis (EDA) using the Iris dataset. We will also delve into Principal Component Analysis (PCA) to understand how to reduce the dimensionality of our data.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#understanding-the-iris-dataset","title":"Understanding the Iris Dataset\u00b6","text":"<p>The Iris dataset is a simple but widely used dataset in pattern recognition. It contains 3 classes of 50 instances each, where each class refers to a type of iris plant. The dataset has the following attributes:</p> <ol> <li>Sepal Length: Length of the sepal in cm</li> <li>Sepal Width: Width of the sepal in cm</li> <li>Petal Length: Length of the petal in cm</li> <li>Petal Width: Width of the petal in cm</li> <li>Class: Species of the iris plant (Iris Setosa, Iris Versicolour, Iris Virginica)</li> </ol>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#data-preprocessing","title":"Data Preprocessing\u00b6","text":"<p>Before diving into any analysis, it's crucial to preprocess the data.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#exploratory-data-analysis-eda","title":"Exploratory Data Analysis (EDA)\u00b6","text":"<p>EDA is all about understanding the data through visualizations and summaries.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#summary-statistics","title":"Summary Statistics\u00b6","text":""},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#data-visualization","title":"Data Visualization\u00b6","text":""},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#histograms","title":"Histograms\u00b6","text":""},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#scatter-plots","title":"Scatter Plots\u00b6","text":""},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#principal-component-analysis-pca","title":"Principal Component Analysis (PCA)\u00b6","text":"<p>PCA is a technique used to reduce the dimensionality of the dataset.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#how-does-pca-work","title":"How Does PCA Work?\u00b6","text":"<ol> <li>Standardization: Standardize the dataset.</li> <li>Covariance Matrix: Compute the covariance matrix.</li> <li>Eigenvalues and Eigenvectors: Compute eigenvalues and eigenvectors.</li> <li>Sort and Select: Sort eigenvalues and select the top k eigenvectors.</li> <li>New Dataset: Form the new dataset.</li> </ol>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#interpretation","title":"Interpretation\u00b6","text":"<p>The scatter plot of the first two principal components should show a clear separation between the different classes of the iris plant. This indicates that the reduced dataset still contains most of the original dataset's variance.</p>"},{"location":"Data_Processing_and_EDA_with_IRIS_Dataset/#conclusion","title":"Conclusion\u00b6","text":"<p>We've covered Data Preprocessing, EDA, and PCA using the Iris dataset. Understanding these concepts is crucial for anyone diving into Data Science and Machine Learning.</p>"},{"location":"Introduction_to_Python_Programming/","title":"Introduction to Python Programming for AI &amp; ML","text":"In\u00a0[\u00a0]: Copied! <pre>message = \"Welcome to AI &amp; ML with Python!\"\nprint(message)\n</pre> message = \"Welcome to AI &amp; ML with Python!\" print(message) In\u00a0[\u00a0]: Copied! <pre>integer_number = 10\nfloating_number = 5.6\ntext = \"Python for AI &amp; ML\"\nflag = True\n\nprint(type(integer_number), type(floating_number), type(text), type(flag))\n</pre> integer_number = 10 floating_number = 5.6 text = \"Python for AI &amp; ML\" flag = True  print(type(integer_number), type(floating_number), type(text), type(flag)) In\u00a0[\u00a0]: Copied! <pre>my_list = [1, 2, 3, 4]\nmy_list.append(5)\nprint(my_list)\n</pre> my_list = [1, 2, 3, 4] my_list.append(5) print(my_list) In\u00a0[\u00a0]: Copied! <pre>my_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(my_dict['b'])\n</pre> my_dict = {'a': 1, 'b': 2, 'c': 3} print(my_dict['b']) In\u00a0[\u00a0]: Copied! <pre>x = 10\nif x &gt; 10:\n    print(\"x is greater than 10\")\nelif x == 10:\n    print(\"x is equal to 10\")\nelse:\n    print(\"x is less than 10\")\n</pre> x = 10 if x &gt; 10:     print(\"x is greater than 10\") elif x == 10:     print(\"x is equal to 10\") else:     print(\"x is less than 10\") In\u00a0[\u00a0]: Copied! <pre>for i in range(5):\n    print(i)\n</pre> for i in range(5):     print(i) In\u00a0[\u00a0]: Copied! <pre>count = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</pre> count = 0 while count &lt; 5:     print(count)     count += 1 In\u00a0[\u00a0]: Copied! <pre>squares = [x**2 for x in range(10)]\nprint(squares)\n</pre> squares = [x**2 for x in range(10)] print(squares) In\u00a0[\u00a0]: Copied! <pre>multiply = lambda x, y: x * y\nprint(multiply(3, 4))\n</pre> multiply = lambda x, y: x * y print(multiply(3, 4)) <p>They are particularly useful when used with functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>.</p> In\u00a0[\u00a0]: Copied! <pre>numbers = [1, 2, 3, 4]\nsquares = map(lambda x: x**2, numbers)\nprint(list(squares))\n</pre> numbers = [1, 2, 3, 4] squares = map(lambda x: x**2, numbers) print(list(squares)) In\u00a0[\u00a0]: Copied! <pre>import re\n\npattern = re.compile(r'\\d+') # Matches one or more digits\nresult = pattern.match(\"12345 is a number\")\nprint(result.group())\n</pre> import re  pattern = re.compile(r'\\d+') # Matches one or more digits result = pattern.match(\"12345 is a number\") print(result.group()) In\u00a0[\u00a0]: Copied! <pre>result = pattern.search(\"The number 12345 is here\")\nprint(result.group())\n</pre> result = pattern.search(\"The number 12345 is here\") print(result.group()) In\u00a0[\u00a0]: Copied! <pre>new_string = re.sub(r'\\d+', 'NUMBER', \"12345 is a number\")\nprint(new_string)\n</pre> new_string = re.sub(r'\\d+', 'NUMBER', \"12345 is a number\") print(new_string) In\u00a0[\u00a0]: Copied! <pre>split_string = re.split(r'\\s+', \"Split on spaces\")\nprint(split_string)\n</pre> split_string = re.split(r'\\s+', \"Split on spaces\") print(split_string) <p>Regular expressions are powerful but can be complex. It's good to practice with various examples to get comfortable with them.</p> In\u00a0[\u00a0]: Copied! <pre>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is not greater than 5\")\n</pre> x = 10 if x &gt; 5:     print(\"x is greater than 5\") else:     print(\"x is not greater than 5\") In\u00a0[\u00a0]: Copied! <pre>for i in range(5):\n    print(i)\n</pre> for i in range(5):     print(i) In\u00a0[\u00a0]: Copied! <pre>def add_numbers(a, b):\n    return a + b\n\nprint(add_numbers(3, 4))\n</pre> def add_numbers(a, b):     return a + b  print(add_numbers(3, 4)) In\u00a0[\u00a0]: Copied! <pre>import numpy as np\n\narray = np.array([1, 2, 3])\nprint(array)\n</pre> import numpy as np  array = np.array([1, 2, 3]) print(array) In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob'], 'Age': [25, 22]}\ndf = pd.DataFrame(data)\nprint(df)\n</pre> import pandas as pd  data = {'Name': ['Alice', 'Bob'], 'Age': [25, 22]} df = pd.DataFrame(data) print(df) In\u00a0[\u00a0]: Copied! <pre>from sklearn.datasets import load_iris\n\niris = load_iris()\nprint(iris.data[0:5])\n</pre> from sklearn.datasets import load_iris  iris = load_iris() print(iris.data[0:5]) In\u00a0[\u00a0]: Copied! <pre>import tensorflow as tf\nfrom tensorflow import keras\n\nprint(tf.__version__)\n</pre> import tensorflow as tf from tensorflow import keras  print(tf.__version__)"},{"location":"Introduction_to_Python_Programming/#introduction-to-python-programming-for-ai-ml","title":"Introduction to Python Programming for AI &amp; ML\u00b6","text":"<p>Python is a powerful programming language widely used in the fields of Artificial Intelligence (AI) and Machine Learning (ML). This notebook serves as an introduction to Python, focusing on aspects that are particularly relevant for AI and ML applications.</p>"},{"location":"Introduction_to_Python_Programming/#basics-of-python","title":"Basics of Python\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#printing-and-variables","title":"Printing and Variables\u00b6","text":"<p>Python allows us to print text and store values in variables. Here's an example:</p>"},{"location":"Introduction_to_Python_Programming/#data-types","title":"Data Types\u00b6","text":"<p>Understanding basic data types such as integers, floats, strings, and booleans is essential.</p>"},{"location":"Introduction_to_Python_Programming/#lists-and-dictionaries","title":"Lists and Dictionaries\u00b6","text":"<p>Python provides powerful data structures like lists and dictionaries.</p>"},{"location":"Introduction_to_Python_Programming/#lists","title":"Lists\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#dictionaries","title":"Dictionaries\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#control-structures","title":"Control Structures\u00b6","text":"<p>Control structures are fundamental in programming. They allow you to control the flow of the program.</p>"},{"location":"Introduction_to_Python_Programming/#conditional-statements","title":"Conditional Statements\u00b6","text":"<p>The use of <code>if</code>, <code>elif</code>, and <code>else</code> to control the flow of code based on conditions.</p>"},{"location":"Introduction_to_Python_Programming/#loops","title":"Loops\u00b6","text":"<p>Loops are used to repeat code.</p>"},{"location":"Introduction_to_Python_Programming/#for-loops","title":"For Loops\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#while-loops","title":"While Loops\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#list-comprehensions","title":"List Comprehensions\u00b6","text":"<p>List comprehensions provide a concise way to create lists.</p>"},{"location":"Introduction_to_Python_Programming/#lambda-functions","title":"Lambda Functions\u00b6","text":"<p>Lambda functions are small anonymous functions defined with the <code>lambda</code> keyword.</p>"},{"location":"Introduction_to_Python_Programming/#regular-expressions","title":"Regular Expressions\u00b6","text":"<p>Regular expressions are used to match patterns in strings. The <code>re</code> module in Python provides functionalities to work with regular expressions.</p>"},{"location":"Introduction_to_Python_Programming/#matching-a-pattern","title":"Matching a Pattern\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#searching-for-a-pattern","title":"Searching for a Pattern\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#replacing-a-pattern","title":"Replacing a Pattern\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#splitting-a-string-based-on-a-pattern","title":"Splitting a String Based on a Pattern\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#conclusion","title":"Conclusion\u00b6","text":"<p>With the understanding of control structures, lambda functions, and regular expressions, you now have more tools to write effective and efficient Python code for AI and ML applications. These concepts form the building blocks of many algorithms and data processing tasks in AI and ML.</p>"},{"location":"Introduction_to_Python_Programming/#conditional-statements","title":"Conditional Statements\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#loops","title":"Loops\u00b6","text":""},{"location":"Introduction_to_Python_Programming/#functions","title":"Functions\u00b6","text":"<p>Creating functions is essential for writing modular and maintainable code.</p>"},{"location":"Introduction_to_Python_Programming/#libraries-for-ai-ml","title":"Libraries for AI &amp; ML\u00b6","text":"<p>Python\u2019s ecosystem includes many libraries designed specifically for AI &amp; ML.</p>"},{"location":"Introduction_to_Python_Programming/#numpy","title":"NumPy\u00b6","text":"<p>NumPy is a library for numerical operations.</p>"},{"location":"Introduction_to_Python_Programming/#pandas","title":"Pandas\u00b6","text":"<p>Pandas is used for data manipulation and analysis.</p>"},{"location":"Introduction_to_Python_Programming/#scikit-learn","title":"Scikit-learn\u00b6","text":"<p>Scikit-learn provides tools for data mining and data analysis.</p>"},{"location":"Introduction_to_Python_Programming/#tensorflow-and-keras","title":"TensorFlow and Keras\u00b6","text":"<p>TensorFlow and Keras are popular for deep learning.</p>"},{"location":"Markov_process_for_modelling_manufacturing_processes/","title":"Markov process for modelling manufacturing processes","text":""},{"location":"Markov_process_for_modelling_manufacturing_processes/#markov-process-for-modelling-manufacturing-processes","title":"Markov process for modelling manufacturing processes\u00b6","text":""},{"location":"Reinforced_Learning_for_optimizing_engineering_designs/","title":"Reinforced Learning for optimizing engineering designs","text":""},{"location":"Reinforced_Learning_for_optimizing_engineering_designs/#reinforced-learning-for-optimizing-engineering-designs","title":"Reinforced Learning for optimizing engineering designs\u00b6","text":""},{"location":"To_develop_classification_model_and_evaluate_its_performance/","title":"To develop classification model and evaluate its performance","text":""},{"location":"To_develop_classification_model_and_evaluate_its_performance/#to-develop-classification-model-and-evaluate-its-performance","title":"To develop classification model and evaluate its performance\u00b6","text":""},{"location":"To_develop_regression_model_and_evaluate_its_performance/","title":"To develop regression model and evaluate its performance","text":""},{"location":"To_develop_regression_model_and_evaluate_its_performance/#to-develop-regression-model-and-evaluate-its-performance","title":"To develop regression model and evaluate its performance\u00b6","text":""},{"location":"To_extract_features_from_given_data_set_and_establish_training_data/","title":"To extract features from given data set and establish training data","text":""},{"location":"To_extract_features_from_given_data_set_and_establish_training_data/#to-extract-features-from-given-data-set-and-establish-training-data","title":"To extract features from given data set and establish training data\u00b6","text":""},{"location":"To_select_relevant_features_using_suitable_technique/","title":"To select relevant features using suitable technique","text":""},{"location":"To_select_relevant_features_using_suitable_technique/#to-select-relevant-features-using-suitable-technique","title":"To select relevant features using suitable technique\u00b6","text":""},{"location":"To_use_PCA_for_dimensionality_reduction/","title":"To use PCA for dimensionality reduction","text":""},{"location":"To_use_PCA_for_dimensionality_reduction/#to-use-pca-for-dimensionality-reduction","title":"To use PCA for dimensionality reduction\u00b6","text":""},{"location":"setup/","title":"Local Installation Setup for Machine Learning and AI Course","text":"<p>This guide is for the latest stable version of TensorFlow. For the preview build (nightly), use the pip package named <code>tf-nightly</code>. Refer to these tables for older TensorFlow version requirements. For the CPU-only build, use the pip package named <code>tensorflow-cpu</code>.</p> <p>Here are the quick versions of the install commands if you have the base software installed. Scroll down for the step-by-step instructions.</p> LinuxMacOSWindows <p>Note: Starting with TensorFlow <code>2.10</code>, Linux CPU-builds for Aarch64/ARM64 processors are built, maintained, tested and released by a third party: AWS. Installing the <code>tensorflow</code> package on an ARM machine installs AWS's <code>tensorflow-cpu-aws</code> package. They are provided as-is. Tensorflow will use reasonable efforts to maintain the availability and integrity of this pip package. There may be delays if the third party fails to release the pip package. See this blog post for more information about this collaboration.</p> <pre><code>conda install -c conda-forge cudatoolkit=11.8.0\npython3 -m pip install nvidia-cudnn-cu11==8.6.0.163 tensorflow==2.13.*\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n</code></pre> <p><pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre> <pre><code>mkdir -p $CONDA_PREFIX/etc/conda/activate.d\necho 'CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\necho 'export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\nsource $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n# Verify install:\npython3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre></p> <pre><code># There is currently no official GPU support for MacOS.\npython3 -m pip install tensorflow\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n</code></pre> <pre><code>pip install scikit-learn pandas pillow jupyter\n# Verify install:\npython3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre>"},{"location":"setup/#windows-native","title":"Windows Native","text":"<p>Caution: TensorFlow <code>2.10</code> was the last TensorFlow release that supported GPU on native-Windows. Starting with TensorFlow <code>2.11</code>, you will need to install TensorFlow in WSL2, or install <code>tensorflow</code> or <code>tensorflow-cpu</code> and, optionally, try the TensorFlow-DirectML-Plugin</p> <pre><code>conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0\n# Anything above 2.10 is not supported on the GPU on Windows Native\npython -m pip install \"tensorflow&lt;2.11\"\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n# Verify install:\npython -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre>"},{"location":"setup/#windows-wsl2","title":"Windows WSL2","text":"<p>Note: TensorFlow with GPU access is supported for WSL2 on Windows 10 19044 or higher. This corresponds to Windows 10 version 21H2, the November 2021 update. You can get the latest update from here: Download Windows 10. For instructions, see Install WSL2 and NVIDIA\u2019s setup docs for CUDA in WSL.</p> <pre><code>conda install -c conda-forge cudatoolkit=11.8.0\npython3 -m pip install nvidia-cudnn-cu11==8.6.0.163 tensorflow==2.13.*\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\nmkdir -p $CONDA_PREFIX/etc/conda/activate.d\necho 'CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\necho 'export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\nsource $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n# Verify install:\npython3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre>"},{"location":"setup/#cpu","title":"CPU","text":"<p>Note: Starting with TensorFlow <code>2.10</code>, Windows CPU-builds for x86/x64 processors are built, maintained, tested and released by a third party: Intel. Installing the Windows-native <code>tensorflow</code> or <code>tensorflow-cpu</code> package installs Intel's <code>tensorflow-intel</code> package. These packages are provided as-is. Tensorflow will use reasonable efforts to maintain the availability and integrity of this pip package. There may be delays if the third party fails to release the pip package. See this blog post for more information about this collaboration.</p> <pre><code>python3 -m pip install tensorflow\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#verify-install","title":"Verify install:","text":"<pre><code>python3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre>"},{"location":"setup/#nightly","title":"Nightly","text":"<pre><code>python3 -m pip install tf-nightly\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#verify-install_1","title":"Verify install:","text":"<pre><code>python3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre>"},{"location":"setup/#hardware-requirements","title":"Hardware requirements","text":"<p>The following GPU-enabled devices are supported:</p> <ul> <li>NVIDIA\u00ae GPU card with CUDA\u00ae architectures 3.5, 5.0, 6.0, 7.0, 7.5, 8.0 and higher. See the list of CUDA\u00ae-enabled GPU cards.</li> <li>For GPUs with unsupported CUDA\u00ae architectures, or to avoid JIT compilation from PTX, or to use different versions of the NVIDIA\u00ae libraries, see the Linux build from source guide.</li> <li>Packages do not contain PTX code except for the latest supported CUDA\u00ae architecture; therefore, TensorFlow fails to load on older GPUs when <code>CUDA_FORCE_PTX_JIT=1</code> is set. (See Application Compatibility for details.)</li> </ul>"},{"location":"setup/#system-requirements","title":"System requirements","text":"<ul> <li>Ubuntu 16.04 or higher (64-bit) or any other Linux System (64-bit)</li> <li>macOS 10.12.6 (Sierra) or higher (64-bit) (no GPU support)</li> <li>Windows Native - Windows 7 or higher (64-bit) (no GPU support after TF 2.10)</li> <li>Windows WSL2 - Windows 10 19044 or higher (64-bit)</li> </ul> <p>Note: GPU support is available for Ubuntu and Windows with CUDA\u00ae-enabled cards.</p>"},{"location":"setup/#software-requirements","title":"Software requirements","text":"<ul> <li>Python 3.8\u20133.11</li> <li>pip version 19.0 or higher for Linux (requires <code>manylinux2014</code> support) and Windows. pip version 20.3 or higher for macOS.</li> <li>Windows Native Requires Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019</li> </ul> <p>The following NVIDIA\u00ae software are only required for GPU support.</p> <ul> <li>NVIDIA\u00ae GPU drivers version 450.80.02 or higher.</li> <li>CUDA\u00ae Toolkit 11.8.</li> <li>cuDNN SDK 8.6.0.</li> <li>(Optional) TensorRT to improve latency and throughput for inference.</li> </ul>"},{"location":"setup/#step-by-step-instructions","title":"Step-by-step instructions","text":""},{"location":"setup/#_1","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#linux","title":"Linux","text":""},{"location":"setup/#_2","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#1-system-requirements","title":"1. System requirements","text":"<ul> <li>Ubuntu 16.04 or higher (64-bit)</li> </ul> <p>TensorFlow only officially support Ubuntu. However, the following instructions may also work for other Linux distros.</p> <p>Note: Starting with TensorFlow <code>2.10</code>, Linux CPU-builds for Aarch64/ARM64 processors are built, maintained, tested and released by a third party: AWS. Installing the <code>tensorflow</code> package on an ARM machine installs AWS's <code>tensorflow-cpu-aws</code> package. They are provided as-is. Tensorflow will use reasonable efforts to maintain the availability and integrity of this pip package. There may be delays if the third party fails to release the pip package. See this blog post for more information about this collaboration.</p>"},{"location":"setup/#_3","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#2-install-miniconda","title":"2. Install Miniconda","text":"<p>Miniconda is the recommended approach for installing TensorFlow with GPU support. It creates a separate environment to avoid changing any installed software in your system. This is also the easiest way to install the required software especially for the GPU setup.</p> <p>You can use the following command to install Miniconda. During installation, you may need to press enter and type \"yes\".</p> <pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <p>You may need to restart your terminal or <code>source ~/.bashrc</code> to enable the <code>conda</code> command. Use <code>conda -V</code> to test if it is installed successfully.</p>"},{"location":"setup/#_4","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#3-create-a-conda-environment","title":"3. Create a conda environment","text":"<p>Create a new conda environment named <code>tf</code> with the following command.</p> <pre><code>conda create --name tf python=3.9\n</code></pre> <p>You can deactivate and activate it with the following commands.</p> <pre><code>conda deactivate\nconda activate tf\n</code></pre> <p>Make sure it is activated for the rest of the installation.</p>"},{"location":"setup/#_5","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#4-gpu-setup","title":"4. GPU Setup","text":"<p>You can skip this section if you only run TensorFlow on the CPU.</p> <p>First install the NVIDIA GPU driver if you have not. You can use the following command to verify it is installed.</p> <pre><code>nvidia-smi\n</code></pre> <p>Then install CUDA and cuDNN with conda and pip.</p> <pre><code>conda install -c conda-forge cudatoolkit=11.8.0\npip install nvidia-cudnn-cu11==8.6.0.163\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Configure the system paths. You can do it with the following command every time you start a new terminal after activating your conda environment.</p> <pre><code>CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))\nexport LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH\n</code></pre> <p>For your convenience it is recommended that you automate it with the following commands. The system paths will be automatically configured when you activate this conda environment.</p> <pre><code>mkdir -p $CONDA_PREFIX/etc/conda/activate.d\necho 'CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\necho 'export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n</code></pre>"},{"location":"setup/#_6","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#5-install-tensorflow","title":"5. Install TensorFlow","text":"<p>TensorFlow requires a recent version of pip, so upgrade your pip installation to be sure you're running the latest version.</p> <pre><code>pip install --upgrade pip\n\n# To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Then, install TensorFlow with pip.</p> <p>Note: Do not install TensorFlow with conda. It may not have the latest stable version. pip is recommended since TensorFlow is only officially released to PyPI.</p> <pre><code>pip install tensorflow==2.13.*\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#_7","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#6-verify-install","title":"6. Verify Install","text":"<p>Verify the CPU setup:</p> <p><pre><code>python3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre> <pre><code>If a tensor is returned, you've installed TensorFlow successfully.\n\nVerify the GPU setup:\n</code></pre> <pre><code>python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre></p> <p>If a list of GPU devices is returned, you've installed TensorFlow successfully.</p>"},{"location":"setup/#_8","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#ubuntu-2204","title":"Ubuntu 22.04","text":"<p>In Ubuntu 22.04, you may encounter the following error:</p> <pre><code>Can't find libdevice directory ${CUDA_DIR}/nvvm/libdevice.\n...\nCouldn't invoke ptxas --version\n...\nInternalError: libdevice not found at ./libdevice.10.bc [Op:__some_op]\n</code></pre> <p>To fix this error, you will need to run the following commands.</p> <pre><code># Install NVCC\nconda install -c nvidia cuda-nvcc=11.3.58\n# Configure the XLA cuda directory\nmkdir -p $CONDA_PREFIX/etc/conda/activate.d\nprintf 'export XLA_FLAGS=--xla_gpu_cuda_data_dir=$CONDA_PREFIX/lib/\\n' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\nsource $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n# Copy libdevice file to the required path\nmkdir -p $CONDA_PREFIX/lib/nvvm/libdevice\ncp $CONDA_PREFIX/lib/libdevice.10.bc $CONDA_PREFIX/lib/nvvm/libdevice/\n</code></pre>"},{"location":"setup/#_9","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#macos","title":"MacOS","text":""},{"location":"setup/#_10","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#1-system-requirements_1","title":"1. System requirements","text":"<ul> <li>macOS 10.12.6 (Sierra) or higher (64-bit)</li> </ul> <p>Note: While TensorFlow supports Apple Silicon (M1), packages that include custom C++ extensions for TensorFlow also need to be compiled for Apple M1. Some packages, like tensorflow_decision_forests publish M1-compatible versions, but many packages don't. To use those libraries, you will have to use TensorFlow with x86 emulation and Rosetta.</p> <p>Currently there is no official GPU support for running TensorFlow on MacOS. The following instructions are for running on CPU.</p>"},{"location":"setup/#_11","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#2-check-python-version","title":"2. Check Python version","text":"<p>Check if your Python environment is already configured:</p> <p>Note: Requires Python 3.8\u20133.11, and pip &gt;= 20.3 for MacOS.</p> <pre><code>python3 --version\npython3 -m pip --version\n</code></pre>"},{"location":"setup/#_12","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#3-install-miniconda","title":"3. Install Miniconda","text":"<p>Miniconda is the recommended approach for installing TensorFlow. It creates a separate environment to avoid changing any installed software in your system.</p> <p>Note: Miniconda is not a requirement for running TensorFlow on CPU. If you'd prefer to create a virtual environment using venv or Virtualenv, you can do so. Just adjust the installation steps accordingly, and then follow the instructions to install TensorFlow using pip.</p> <p>Install Miniconda:</p> <pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o Miniconda3-latest-MacOSX-x86_64.sh\nbash Miniconda3-latest-MacOSX-x86_64.sh\n</code></pre> <p>You may need to restart your terminal or <code>source ~/.bashrc</code> to enable the <code>conda</code> command. Use <code>conda -V</code> to test if it is installed successfully.</p>"},{"location":"setup/#_13","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#4-create-a-conda-environment","title":"4. Create a conda environment","text":"<p>Create a new conda environment named <code>tf</code> with the following command.</p> <pre><code>conda create --name tf python=3.9\n</code></pre> <p>You can deactivate and activate it with the following commands.</p> <pre><code>conda deactivate\nconda activate tf\n</code></pre> <p>Make sure it is activated for the rest of the installation.</p>"},{"location":"setup/#_14","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#5-install-tensorflow_1","title":"5. Install TensorFlow","text":"<p>TensorFlow requires a recent version of pip, so upgrade your pip installation to be sure you're running the latest version.</p> <pre><code>pip install --upgrade pip\n\nTo install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Then, install TensorFlow with pip.</p> <p>Note: Do not install TensorFlow with conda. It may not have the latest stable version. pip is recommended since TensorFlow is only officially released to PyPI.</p> <pre><code>pip install tensorflow\n\n# To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:\n\npip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#_15","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#6-verify-install_1","title":"6. Verify Install","text":"<pre><code>python3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre> <p>If a tensor is returned, you've installed TensorFlow successfully.</p>"},{"location":"setup/#_16","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#windows-native_1","title":"Windows Native","text":"<p>Caution: TensorFlow <code>2.10</code> was the last TensorFlow release that supported GPU on native-Windows. Starting with TensorFlow <code>2.11</code>, you will need to install TensorFlow in WSL2, or install <code>tensorflow-cpu</code> and, optionally, try the TensorFlow-DirectML-Plugin</p>"},{"location":"setup/#1-system-requirements_2","title":"1. System requirements","text":"<ul> <li>Windows 7 or higher (64-bit)</li> </ul> <p>Note: Starting with TensorFlow <code>2.10</code>, Windows CPU-builds for x86/x64 processors are built, maintained, tested and released by a third party: Intel. Installing the windows-native <code>tensorflow</code> or <code>tensorflow-cpu</code> package installs Intel's <code>tensorflow-intel</code> package. These packages are provided as-is. Tensorflow will use reasonable efforts to maintain the availability and integrity of this pip package. There may be delays if the third party fails to release the pip package. See this blog post for more information about this collaboration.</p>"},{"location":"setup/#_17","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#2-install-microsoft-visual-c-redistributable","title":"2. Install Microsoft Visual C++ Redistributable","text":"<p>Install the Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017, and 2019. Starting with the TensorFlow 2.1.0 version, the <code>msvcp140_1.dll</code> file is required from this package (which may not be provided from older redistributable packages). The redistributable comes with Visual Studio 2019 but can be installed separately:</p> <ol> <li>Go to the Microsoft Visual C++ downloads.</li> <li>Scroll down the page to the Visual Studio 2015, 2017 and 2019 section.</li> <li>Download and install the Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019 for your platform.</li> </ol> <p>Make sure long paths are enabled on Windows.</p>"},{"location":"setup/#_18","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#3-install-miniconda_1","title":"3. Install Miniconda","text":"<p>Miniconda is the recommended approach for installing TensorFlow with GPU support. It creates a separate environment to avoid changing any installed software in your system. This is also the easiest way to install the required software especially for the GPU setup.</p> <p>Download the Miniconda Windows Installer. Double-click the downloaded file and follow the instructions on the screen.</p>"},{"location":"setup/#_19","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#4-create-a-conda-environment_1","title":"4. Create a conda environment","text":"<p>Create a new conda environment named <code>tf</code> with the following command.</p> <pre><code>conda create --name tf python=3.9\n</code></pre> <p>You can deactivate and activate it with the following commands.</p> <pre><code>conda deactivate\nconda activate tf\n</code></pre> <p>Make sure it is activated for the rest of the installation.</p>"},{"location":"setup/#_20","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#5-gpu-setup","title":"5. GPU setup","text":"<p>You can skip this section if you only run TensorFlow on CPU.</p> <p>First install NVIDIA GPU driver if you have not.</p> <p>Then install the CUDA, cuDNN with conda.</p> <pre><code>conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0\n</code></pre>"},{"location":"setup/#_21","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#6-install-tensorflow","title":"6. Install TensorFlow","text":"<p>TensorFlow requires a recent version of pip, so upgrade your pip installation to be sure you're running the latest version.</p> <pre><code>pip install --upgrade pip\n</code></pre> <p>To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:</p> <pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Then, install TensorFlow with pip.</p> <p>Note: Do not install TensorFlow with conda. It may not have the latest stable version. pip is recommended since TensorFlow is only officially released to PyPI.</p> <pre><code># Anything above 2.10 is not supported on the GPU on Windows Native\npip install \"tensorflow&lt;2.11\" </code></pre> <p>To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:</p> <pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#_22","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#7-verify-install","title":"7. Verify install","text":"<p>Verify the CPU setup:</p> <pre><code>python -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre> <p>If a tensor is returned, you've installed TensorFlow successfully.</p> <p>Verify the GPU setup:</p> <pre><code>python -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre> <p>If a list of GPU devices is returned, you've installed TensorFlow successfully.</p>"},{"location":"setup/#_23","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#windows-wsl2_1","title":"Windows WSL2","text":""},{"location":"setup/#_24","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#1-system-requirements_3","title":"1. System requirements","text":"<ul> <li>Windows 10 19044 or higher (64-bit). This corresponds to Windows 10 version 21H2, the November 2021 update.</li> </ul> <p>See the following documents to:</p> <ul> <li>Download the latest Windows 10 update.</li> <li>Install WSL2</li> <li>Setup NVIDIA\u00ae GPU support in WSL2</li> </ul>"},{"location":"setup/#_25","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#2-install-miniconda_1","title":"2. Install Miniconda","text":"<p>Miniconda is the recommended approach for installing TensorFlow with GPU support. It creates a separate environment to avoid changing any installed software in your system. This is also the easiest way to install the required software especially for the GPU setup.</p> <p>You can use the following command to install Miniconda. During installation, you may need to press enter and type \"yes\".</p> <pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <p>You may need to restart your terminal or <code>source ~/.bashrc</code> to enable the <code>conda</code> command. Use <code>conda -V</code> to test if it is installed successfully.</p>"},{"location":"setup/#_26","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#3-create-a-conda-environment_1","title":"3. Create a conda environment","text":"<p>Create a new conda environment named <code>tf</code> with the following command.</p> <p><pre><code>conda create --name tf python=3.9\n</code></pre> <pre><code>You can deactivate and activate it with the following commands.\n</code></pre> <pre><code>conda deactivate\nconda activate tf\n</code></pre></p> <p>Make sure it is activated for the rest of the installation.</p>"},{"location":"setup/#_27","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#4-gpu-setup_1","title":"4. GPU Setup","text":"<p>You can skip this section if you only run TensorFlow on the CPU.</p> <p>First install the NVIDIA GPU driver if you have not. You can use the following command to verify it is installed.</p> <pre><code>nvidia-smi\n</code></pre> <p>Then install CUDA and cuDNN with conda and pip.</p> <p><pre><code>conda install -c conda-forge cudatoolkit=11.8.0\npip install nvidia-cudnn-cu11==8.6.0.163\n</code></pre> To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:</p> <pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Configure the system paths. You can do it with following command everytime your start a new terminal after activating your conda environment.</p> <pre><code>CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDNN_PATH/lib:$CONDA_PREFIX/lib/\n</code></pre> <p>For your convenience it is recommended that you automate it with the following commands. The system paths will be automatically configured when you activate this conda environment.</p> <pre><code>mkdir -p $CONDA_PREFIX/etc/conda/activate.d\necho 'CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\necho 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDNN_PATH/lib:$CONDA_PREFIX/lib/' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n</code></pre>"},{"location":"setup/#_28","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#5-install-tensorflow_2","title":"5. Install TensorFlow","text":"<p>TensorFlow requires a recent version of pip, so upgrade your pip installation to be sure you're running the latest version. <pre><code>pip install --upgrade pip\n</code></pre> To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:</p> <pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre> <p>Then, install TensorFlow with pip.</p> <p>Note: Do not install TensorFlow with conda. It may not have the latest stable version. pip is recommended since TensorFlow is only officially released to PyPI.</p> <p><pre><code>pip install tensorflow==2.13.*\n</code></pre> To install additional packages required for the course such as scikit-learn, pandas, pillow, and Jupyter, use the following command:</p> <pre><code>pip install scikit-learn pandas pillow jupyter\n</code></pre>"},{"location":"setup/#_29","title":"Local Installation Setup for OE4M74 Lab","text":""},{"location":"setup/#6-verify-install_2","title":"6. Verify Install","text":"<p>Verify the CPU setup:</p> <pre><code>python3 -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n</code></pre> <p>If a tensor is returned, you've installed TensorFlow successfully.</p> <p>Verify the GPU setup:</p> <pre><code>python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"\n</code></pre> <p>If a list of GPU devices is returned, you've installed TensorFlow successfully.</p>"},{"location":"setup/#package-location","title":"Package location","text":"<p>A few installation mechanisms require the URL of the TensorFlow Python package. The value you specify depends on your Python version.</p> VersionURL Linux Python 3.8 GPU\u00a0support https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-2.13.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl Python 3.8 CPU-only https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-2.13.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl Python 3.9 GPU\u00a0support https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-2.13.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl Python 3.9 CPU-only https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-2.13.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl Python 3.10 GPU\u00a0support https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-2.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl Python 3.10 CPU-only https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-2.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl macOS (CPU-only) Python 3.8 https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-2.13.0-cp38-cp38-macosx_10_15_x86_64.whl Python 3.9 https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-2.13.0-cp39-cp39-macosx_10_15_x86_64.whl Python 3.10 https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-2.13.0-cp310-cp310-macosx_10_15_x86_64.whl Windows Python 3.8 CPU-only https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow_cpu-2.13.0-cp38-cp38-win_amd64.whl Python 3.9 CPU-only https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow_cpu-2.13.0-cp39-cp39-win_amd64.whl Python 3.10 CPU-only https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow_cpu-2.13.0-cp310-cp310-win_amd64.whl"}]}